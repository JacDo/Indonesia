)$content))$data
}
airports <- seq(0, upper, by = 100) %>% map_df(~ loop(.,
params = params,
link = link
))
View(airports)
key = "8d0cfd86b0575aab13f2e68d339d7191"
res <- GET("https://api.aviationstack.com/v1/flights",
query = list(access_key = key, flight_date= "2019-01-12")
)
jsonRespParsed <- fromJSON(rawToChar(res$content))
jsonRespParsed$data
res <- GET("http://api.aviationstack.com/v1/flights",
query = list(access_key = key, offset = 0)
)
jsonRespParsed <- fromJSON(rawToChar(res$content))
jsonRespParsed$data
key = "8d0cfd86b0575aab13f2e68d339d7191"
res <- GET("https://api.aviationstack.com/v1/flights",
query = list(access_key = key, flight_date= "2019-12-01")
)
jsonRespParsed <- fromJSON(rawToChar(res$content))
jsonRespParsed$data
jsonRespParsed$pagination
flight_input =  seq(as.Date("2019-12-01"), as.Date("2019-12-07"), by="days")
flight_input
View(airports)
arrival_input = airports$iata_code
arrival_input
link = "https://api.aviationstack.com/v1/flights"
View(airports)
new <- function(airport, link, date) {
params <- list(access_key = key, flight_date = date, arr_iata = airport)
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
airports <- seq(0, upper, by = 100) %>%
map_df(~ loop(., link = link, params = params))
}
list(c(1,2,3), c(4,5,6,7)) %>%
map2_dfr(~.x+.y)
list(c(1,2,3), c(4,5,6,7)) %>%
map2_dfr(~sum)
map2(c(1,2,3), c(4,5,6,7), ~.x+.y)
input = expand.grid(flight_input, arrival_input)
View(input)
View(input)
air_test <-  map2_df(input$Var1, input$Var2, ~ new(airport =.x, date =.y,
link =link
))
map2_df(input$Var1[1], input$Var2[2], ~ new(airport =.x, date =.y,
link =link
))
View(input)
map2_df(input$Var2[1], input$Var1[1], ~ new(airport =.x, date =.y,
link =link
))
View(input)
a = new('2019-01-12', "ABU")
a = new(date = '2019-01-12',link = link, airport="ABU")
input
colnames(input) <- ("date", "airport")
colnames(input) <- c("date", "airport")
input
head(input)
str(input)
air_test <-  map2_df(input$airport, input$date, ~ new(airport =.x, date =.y,
link =link
))
map_df(input$airport[1], input$date[1], ~new(airport =.x,
date =.y, link = link))
input$date[1]
input$airport[1]
input %>%mutate_all( as.character)
input = input %>%mutate_all( as.character)
str(input)
map_df(input$airport[1], input$date[1], ~new(airport =.x,
date =.y, link = link))
map_df(input$airport[1:5], input$date[1:5], ~new(airport =.x,
date =.y, link = link))
air_test <-  map2_df(input$airport, input$date, ~ new(airport =.x, date =.y,
link =link
))
air_test <-  map2_df(input$airport, input$date, ~ {new(airport =.x, date =.y,
link =link}
))
air_test <-  map2_df(input$airport, input$date, ~ {new(airport =.x, date =.y,
link =link)}
)
air_test <-  map2_df(input$airport[1:10], input$date[1:10], ~ {new(airport =.x, date =.y,
link =link)}
)
new <- function(airport, link, date) {
params <- list(access_key = key, flight_date = date, arr_iata = airport)
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
airports <- seq(0, upper, by = 100) %>%
map_df(~ loop(., link = link, params = params))%>%
unnest()
}
air_test <-  map2_df(input$airport[1:10], input$date[1:10], ~ {new(airport =.x, date =.y,
link =link)}
)
air_test <-  map2_df(input$airport[6], input$date[6], ~ {new(airport =.x, date =.y,
link =link)}
)
air_test <-  map2_df(input$airport[7], input$date[7], ~ {new(airport =.x, date =.y,
link =link)}
)
input$airport[7]
input$date[7]
new(input$airport[7], date = input$date[7], link =link)
new("ABU", date = "2019-12-07", link =link)
params <- list(access_key = key, flight_date = '2019-01-12', arr_iata = "ABU")
start <- GET(link,
query = c(params, offset = 0)
total <- fromJSON(rawToChar(start$content))$pagination$total
fromJSON(rawToChar(start$content))
link = "https://api.aviationstack.com/v1/flights"
params <- list(access_key = key, flight_date = '2019-01-12', arr_iata = "ABU")
start <- GET(link,
query = c(params, offset = 0)
fromJSON(rawToChar(start$content))$pagination$total
fromJSON(rawToChar(start$content))
start <- GET(link,
query = list(access_key = key, flight_date = '2019-01-12',
arr_iata = "ABU"))
fromJSON(rawToChar(start$content))
key = "8d0cfd86b0575aab13f2e68d339d7191"
res <- GET("https://api.aviationstack.com/v1/flights",
query = list(access_key = key, flight_date= "2019-12-01")
)
jsonRespParsed <- fromJSON(rawToChar(res$content))
jsonRespParsed$data
test = jsonRespParsed$data
View(test)
test = unnest(jsonRespParsed$data)
test = unlist(jsonRespParsed$data)
jsonRespParsed <- fromJSON(rawToChar(res$content))
test = jsonRespParsed$data
str(test)
testi =lapply(rapply(test, enquote, how="unlist"), eval)
View(testi)
testi =data.frame(lapply(rapply(test, enquote, how="unlist"), eval))
View(testi)
loop <- function(i, params, link) {
rest <- fromJSON(rawToChar(GET(link,
query = c(params, offset = i)
)$content))$data
rest <-data.frame(lapply(rapply(rest, enquote, how="unlist"), eval))
}
new <- function(airport, link, date) {
params <- list(access_key = key, flight_date = date, arr_iata = airport)
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
airports <- seq(0, upper, by = 100) %>%
map_df(~ loop(., link = link, params = params))
}
a = new(date = '2019-01-12',link = link, airport="ABU")
start <- GET(link,
query = list(access_key = key, flight_date = '2019-01-12',
arr_iata = "ABU"))
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
key = "8d0cfd86b0575aab13f2e68d339d7191"
link = "https://api.aviationstack.com/v1/flights"
start <- GET(link,
query = list(access_key = key, flight_date = '2019-01-12',
arr_iata = "ABU"))
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
link <- "http://api.aviationstack.com/v1/airports"
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(plyr)
library(ggmap)
############# set up##########
key <- "86dad5e9f764ea223fe77fb843618171"
######### specify offset#####
# every request yields 100 flights
# pagination
# divide total by 100 to obtain total number of offsets#####
# example
# this is the free version, the paid version allows "https"
res <- GET("http://api.aviationstack.com/v1/flights",
query = list(access_key = key, offset = 0)
)
## clean results
jsonRespParsed <- fromJSON(rawToChar(res$content))
# use pagination to check: e.g. total = 139417 -> 1395 offsets to loop through
jsonRespParsed$pagination
## first 100
test <- jsonRespParsed$data
####### https://api.aviationstack.com/v1/airports
### ? access_key = YOUR_ACCESS_KEY
### specify all airports in Indonesia
### https://api.aviationstack.com/v1/flights
## ? access_key = YOUR_ACCESS_KEY
### specify the date and the airports
##### get airports
link <- "http://api.aviationstack.com/v1/airports"
params <- list(access_key = key, country_name = "Indonesia")
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
loop <- function(i, params, link) {
rest <- fromJSON(rawToChar(GET(link,
query = c(params, offset = i)
)$content))$data
rest <-data.frame(lapply(rapply(rest, enquote, how="unlist"), eval))
}
airports <- seq(0, upper, by = 100) %>% map_df(~ loop(.,
params = params,
link = link
))
View(airports)
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(plyr)
library(ggmap)
##################
key = "8d0cfd86b0575aab13f2e68d339d7191"
res <- GET("https://api.aviationstack.com/v1/flights",
query = list(access_key = key, flight_date= "2019-12-01")
)
## clean results
jsonRespParsed <- fromJSON(rawToChar(res$content))
## clean results
jsonRespParsed <- fromJSON(rawToChar(res$content))
flight_input =  seq(as.Date("2019-12-01"), as.Date("2019-12-07"), by="days")
arrival_input = airports$iata_code
link = "https://api.aviationstack.com/v1/flights"
jsonRespParsed$data
a =jsonRespParsed$data
str(a)
a =data.frame(jsonRespParsed$data)
str(a)
input = expand.grid(flight_input, arrival_input)
colnames(input) <- c("date", "airport")
input = input %>%mutate_all( as.character)
new("ABU", date = "2019-12-07", link =link)
b =new("ABU", date = "2019-12-07", link =link)
View(b)
air_test <-  map2_df(input$airport[7], input$date[7], ~ {new(airport =.x, date =.y,
link =link)}
)
View(air_test)
air_test <-  map2_df(input$airport, input$date, ~ {new(airport =.x, date =.y,
link =link)}
)
View(air_test)
air_testi <-  map2_df(input$airport[1:50], input$date[1:50], ~ {new(airport =.x, date =.y,
link =link)}
)
View(air_testi)
View(air_testi)
View(air_testi)
View(input)
View(air_testi)
air_total <-  map2_df(input$airport, input$date, ~ {new(airport =.x, date =.y,
link =link)}
)
install.packages("furrr")
library(furrr)
new <- function(airport, link, date) {
params <- list(access_key = key, flight_date = date, arr_iata = airport,
flight_status ="landed")
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
airports <- seq(0, upper, by = 100) %>%
future_map_dfr(~ loop(., link = link, params = params))
}
new(link =link, date ="2019-12-01", "ABU")
t =new(link =link, date ="2019-12-01", "ABU")
View(t)
t =new(link =link, date ="2019-12-01", "ABU", .progress =T)
air_totali <-  future_map2_dfr(input$airport[1:10], input$date[1:10], ~ {new(airport =.x, date =.y,
link =link),.progress =T}
)
air_totali <-  future_map2_dfr(input$airport[1:10], input$date[1:10], ~ {new(airport =.x, date =.y,
link =link)},.progress =T
)
View(air_totali)
air_total <-  future_map2_dfr(input$airport, input$date, ~ {new(airport =.x, date =.y,
link =link)}
)
library(furrr)
plan(multiprocess)
library(furrr)
plan(multiprocess)
))
library(furrr)
plan(multiprocess)
air_total <-  future_map2_dfr(input$airport, input$date, ~ {new(airport =.x, date =.y,
link =link)}
)
styler:::style_active_file()
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(plyr)
library(furr)
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(plyr)
library(furrr)
key <- "8d0cfd86b0575aab13f2e68d339d7191"
plan(multiprocess)
clean <- function(i, params, link) {
rest <- fromJSON(rawToChar(
GET(link, query = c(params, offset = i))$content
))$data
rest <- data.frame(lapply(rapply(rest, enquote, how = "unlist"), eval))
}
scrape <- function(airport, link, date) {
params <- list(
access_key = key, flight_date = date, arr_iata = airport,
flight_status = "landed"
)
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
data <- seq(0, upper, by = 100) %>%
future_map_dfr(~ clean(., link = link, params = params))
}
styler:::style_selection()
styler:::style_active_file()
params <- list(access_key = key, country_name = "Indonesia")
airports <- seq(0, upper, by = 100) %>%
future_map_dfr(~ clean(.,
params = params,
link = airport_link
))
params <- list(access_key = key, country_name = "Indonesia")
start <- GET(airport_link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(plyr)
library(furrr)
#################################################
####### setup############
key <- "8d0cfd86b0575aab13f2e68d339d7191"
plan(multiprocess)
######### functions#############
##### function to clean the JSON code after request
clean <- function(i, params, link) {
rest <- fromJSON(rawToChar(
GET(link, query = c(params, offset = i))$content
))$data
rest <- data.frame(lapply(rapply(rest, enquote, how = "unlist"), eval))
}
scrape <- function(airport, link, date) {
params <- list(
access_key = key, flight_date = date, arr_iata = airport,
flight_status = "landed"
)
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
data <- seq(0, upper, by = 100) %>%
future_map_dfr(~ clean(., link = link, params = params))
}
########### links###################
airport_link <- "https://api.aviationstack.com/v1/airports"
link <- "https://api.aviationstack.com/v1/flights"
######### get list of airports##########
params <- list(access_key = key, country_name = "Indonesia")
start <- GET(airport_link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
airports <- seq(0, upper, by = 100) %>%
future_map_dfr(~ clean(.,
params = params,
link = airport_link
))
View(airports)
date_input <- seq(as.Date("2019-12-01"), as.Date("2019-12-07"), by = "days")
arrival_input <- airports$iata_code
input <- expand.grid(date_input, arrival_input)
colnames(input) <- c("date", "airport")
input <- input %>%
mutate_all(as.character)
air_total <- future_map2_dfr(input$airport[1:20], input$date[1:20], ~ {
scrape(
airport = .x,
date = .y,
link = link
)
})
View(air_total)
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(plyr)
library(furrr)
#################################################
####### setup############
key <- "8d0cfd86b0575aab13f2e68d339d7191"
plan(multiprocess)
######### functions#############
##### function to clean the JSON code after request
clean <- function(i, params, link) {
rest <- fromJSON(rawToChar(
GET(link, query = c(params, offset = i))$content
))$data
rest <- data.frame(lapply(rapply(rest, enquote, how = "unlist"), eval))
}
scrape <- function(airport, link, date) {
params <- list(
access_key = key, flight_date = date, arr_iata = airport,
flight_status = "landed"
)
start <- GET(link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
data <- seq(0, upper, by = 100) %>%
future_map_dfr(~ clean(., link = link, params = params))
}
########### links###################
airport_link <- "https://api.aviationstack.com/v1/airports"
link <- "https://api.aviationstack.com/v1/flights"
######### get list of airports##########
params <- list(access_key = key, country_name = "Indonesia")
start <- GET(airport_link,
query = c(params, offset = 0)
)
total <- fromJSON(rawToChar(start$content))$pagination$total
upper <- round_any(total, 100, f = floor)
airports <- seq(0, upper, by = 100) %>%
future_map_dfr(~ clean(.,
params = params,
link = airport_link
))
########## input parameters#############
date_input <- seq(as.Date("2019-12-01"), as.Date("2019-12-07"), by = "days")
arrival_input <- airports$iata_code
input <- expand.grid(date_input, arrival_input)
colnames(input) <- c("date", "airport")
input <- input %>%
mutate_all(as.character)
View(input)
View(airports)
air_total <- future_map2_dfr(input$airport, input$date, ~ {
scrape(
airport = .x,
date = .y,
link = link
)
},.progress = TRUE)
View(air_total)
View(airports)
unique(air_total$flight_date)
View(input)
total <- fromJSON(rawToChar(start$content))$pagination$total
fromJSON(rawToChar(start$content))$pagination
start <- GET(link,
query = link(), offset = 0)
)
GET(link,query = list(access_key =key, arr_iata = "ABU", flight_date ="2020-01-05")
)
start  <-GET(link,query = list(access_key =key, arr_iata = "ABU", flight_date ="2020-01-05")
)
fromJSON(rawToChar(start$content))$pagination
floor(4/100)
round_any(4, 100, f = floor)
warnings()
bla = air_total %>% filter(str_detect(departure.timezone, "Europe"))
View(bla)
round_any(109988, 100,f =floor)
getwd()
setwd("C:/Users/seufe/Dropbox/Unterlagen_Jacqueline/data/tmp")
write.csv("coromap.flights.csv", air_total)
write.csv(file ="coromap.flights.csv", air_total)
View(airports)
View(air_total)
str(air_total)
